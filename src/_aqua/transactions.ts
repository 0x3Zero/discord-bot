/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.10.3
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
 
export type Get_complete_transactionsResult = { err_msg: string; success: boolean; transactions: { alias: string; chain_id: string; data: string; data_key: string; hash: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; status: number; timestamp: number; token_address: string; token_id: string; token_key: string; version: string; }[]; }
export function get_complete_transactions(
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Get_complete_transactionsResult>;

export function get_complete_transactions(
    peer: IFluenceClient$$,
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Get_complete_transactionsResult>;

export function get_complete_transactions(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "from") [] from)
                        )
                        (call %init_peer_id% ("getDataSrv" "to") [] to)
                       )
                       (xor
                        (call -relay- ("transaction" "get_complete_transactions") [from to] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_complete_transactions",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "from" : {
                    "tag" : "scalar",
                    "name" : "i64"
                },
                "to" : {
                    "tag" : "scalar",
                    "name" : "i64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionsResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transactions" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Transaction",
                                "fields" : {
                                    "method" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "mcdata" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "chain_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_node_clockResult = { timestamp: number; }
export function get_node_clock(
    config?: {ttl?: number}
): Promise<Get_node_clockResult>;

export function get_node_clock(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<Get_node_clockResult>;

export function get_node_clock(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (call -relay- ("transaction" "get_node_clock") [] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_node_clock",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbClock",
                    "fields" : {
                        "timestamp" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

/* eslint-enable */